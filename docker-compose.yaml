version: "3.7"
services:
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - kong-net
    depends_on:
      - elasticsearch
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    networks:
      - kong-net
    depends_on:
      - elasticsearch
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  mongodb:
    image: mongo
    ports:
    - "27018:27017"
    networks:
      - kong-net
    volumes: 
      - ./mongodb/db:/data/db
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  zookeeper:
    image: wurstmeister/zookeeper
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
 
  kafka:
    image: wurstmeister/kafka
    ports:
    - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  kafkaproducer:
    build: ./kafka-producer
    ports:
      - "3004:3004"
    networks:
      - kong-net
    depends_on:
      - elasticsearch
      - kafka
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    links:
      - kafka:kafkaq
  
  create:
    build: ./create
    ports:
      - "3000:3000"
    networks:
      - kong-net
    depends_on:
      - elasticsearch
      - mongodb
      - kafka
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    links:
      - kafka:kafkaq

  read:
    build: ./read
    ports:
      - "3001:3001"
    networks:
      - kong-net
    depends_on:
      - elasticsearch
      - mongodb
      - kafka
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  update:
    build: ./update
    ports:
      - "3002:3002"
    networks:
      - kong-net
    depends_on:
      - elasticsearch
      - mongodb
      - kafka
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    links:
      - kafka:kafkaq

  delete:
    build: ./delete
    ports:
      - "3003:3003"
    networks:
      - kong-net
    depends_on:
      - elasticsearch
      - mongodb
      - kafka
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    links:
      - kafka:kafkaq

networks:
  kong-net:
